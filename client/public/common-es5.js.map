{"version":3,"sources":["webpack:///src/app/core/services/auth/auth.service.ts"],"names":["AuthService","afAuth","cookieService","authState","email","password","console","log","signInWithEmailAndPassword","signOut","sendPasswordResetEmail","user","createUserWithEmailAndPassword","uid","get","role","info","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,qF,CAGA;;;QAMaA,W;AAEX,2BACUC,MADV,EAEUC,aAFV,EAEsC;AAAA;;AAD5B,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAC,aAAA,GAAAA,aAAA;AACL;;;;eAEL,sBAAa;AACX,iBAAO,KAAKD,MAAL,CAAYE,SAAnB;AACD;;;eAED,eAAMC,KAAN,EAAqBC,QAArB,EAAuC;AACrCC,iBAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,QAAnB;AACA,iBAAO,KAAKJ,MAAL,CAAYO,0BAAZ,CAAuCJ,KAAvC,EAA8CC,QAA9C,CAAP;AACD;;;eAED,kBAAS;AACP,iBAAO,KAAKJ,MAAL,CAAYQ,OAAZ,EAAP;AACD;;;eAED,wBAAeL,KAAf,EAA8B;AAC5B,iBAAO,KAAKH,MAAL,CAAYS,sBAAZ,CAAmCN,KAAnC,CAAP;AACD;;;eAED,uBAAcC,QAAd,EAA8B,CAC5B;AACA;AACD;;;eAED,oBAAWM,IAAX,EAAmB;AACjB,iBAAO,KAAKV,MAAL,CAAYW,8BAAZ,CAA2CD,IAAI,CAACP,KAAhD,EAAuDO,IAAI,CAACN,QAA5D,CAAP;AACD;;;eAED,4BAAmBD,KAAnB,EAA+B;AAC7B,iBAAO,KAAKH,MAAL,CAAYS,sBAAZ,CAAmCN,KAAnC,CAAP;AACD;;;eAED,uBAAW;AACT,cAAMS,GAAG,GAAG,KAAKX,aAAL,CAAmBY,GAAnB,CAAuB,KAAvB,CAAZ;AACA,cAAMC,IAAI,GAAG,KAAKb,aAAL,CAAmBY,GAAnB,CAAuB,UAAvB,CAAb;AACA,cAAME,IAAI,GAAG;AAACH,eAAG,EAAHA,GAAD;AAAME,gBAAI,EAAJA;AAAN,WAAb;AACA,iBAAOC,IAAP;AACD;;;;;;;uBA1CUhB,W,EAAW,0H,EAAA,wH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACViB,oBAAU,EAAE;AADF,S;AAGY,Q","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from  \"@angular/fire/auth\";\n\n// Libs\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private afAuth: AngularFireAuth,\n    private cookieService: CookieService\n  ) { }\n\n  isLoggedIn() {\n    return this.afAuth.authState;\n  }\n\n  login(email: string, password: string) {\n    console.log(email, password);\n    return this.afAuth.signInWithEmailAndPassword(email, password);\n  }\n\n  logout() {\n    return this.afAuth.signOut();\n  }\n\n  forgotPassword(email: string) {\n    return this.afAuth.sendPasswordResetEmail(email);\n  }\n\n  resetPassword(password: string){\n    // const user = this.afAuth.;\n    // await user.\n  }\n\n  createUser(user:any){\n    return this.afAuth.createUserWithEmailAndPassword(user.email, user.password);\n  }\n\n  resetPasswordEmail(email:string){\n    return this.afAuth.sendPasswordResetEmail(email);\n  }\n\n  getUserInfo(){\n    const uid = this.cookieService.get('uid');\n    const role = this.cookieService.get('roleType');\n    const info = {uid, role}; \n    return info;\n  }\n\n}\n"]}